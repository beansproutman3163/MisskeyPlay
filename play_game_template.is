/*
  https://github.com/beansproutman3163/MisskeyPlay/blob/main/play_game_template.is
  https://github.com/syuilo/aiscript
  https://github.com/misskey-dev/misskey/blob/develop/packages/frontend/src/scripts/aiscript/api.ts
  https://github.com/misskey-dev/misskey/blob/develop/packages/frontend/src/scripts/aiscript/ui.ts
  
  @ 0.13.2
*/
let config = {
  fps: 30
  fpsSamples: 120
}

Ui:render([
  Ui:C:container({
    align: "left"
    children: [
      Ui:C:mfm({ text: "1" }, "counter")
      Ui:C:mfm({ text: "2" }, "timerDt")
      Ui:C:mfm({ text: "3" }, "dt")
      Ui:C:mfm({ text: "4" }, "realFps")
      Ui:C:mfm({ text: "5" }, "err")
      Ui:C:mfm({ text: "6" }, "renderTime")
    ]
  })
])

let rnd = Math:gen_rng(`{USER_ID}{Date:year()}{Date:month()}{Date:day()}`)
var frameCnt = 0
var timerDt = 0

@init() {
  // do App initialization
  frameCnt = 0
  timerDt = 0
}

@update(dt) {
  frameCnt += 1
  timerDt += dt

  var t0 = Date:now()
  Ui:get("counter").update({text: `FrameCount : {frameCnt}`})
  Ui:get("timerDt").update({text: `Time : {timerDt}`})
  Ui:get("dt").update({text: `DeltaTime : {dt}`})
  Ui:get("realFps").update({text: `Fps : {Ft.getRealFps()}`})
  Ui:get("err").update({text: if (Ft.err < 0) {
    `err : {Ft.err}`
  }
  else {
    `err :  {Ft.err}`
  }})
  Ui:get("renderTime").update({text: `renderTime : {Date:now() - t0}`})
}

let Util = {
  clearArray: @(arr) {
    for(arr.len) {
      arr.shift()
    }
  }
}

// FrameTimer
let Ft = {
  targetFps: 0
  targetFt: 0
  dt: 0
  err: 0

  _lastDate: -1
  _samples: []
  _sampleNum: 0

  init: @(conf) {
    Ft.targetFps = conf.fps
    Ft.targetFt = 1000 / conf.fps
    Ft.dt = 1.0 / conf.fps
    Ft.err = 0
    Ft._lastDate = -1
    Ft._sampleNum = conf.fpsSamples
    Util.clearArray(Ft._samples)
  }
  update: @() {
    var now = Date:now()
    if (Ft._lastDate != -1) {
      var dt = now - Ft._lastDate
      Ft.dt = dt / 1000
      Ft.err = dt - Ft.targetFt
      Ft._addSample(1.0 / Ft.dt)
    }
    Ft._lastDate = now
  }
  getRealFps: @() {
    var total = 0
    each (let fps, Ft._samples) {
      total += fps
    }
    if (Ft._samples.len == 0) {
      0
    }
    else {
      total / Ft._samples.len
    }
  }
  _addSample: @(fps) {
    Ft._samples.push(fps)
    if (Ft._samples.len > Ft._sampleNum) {
      Ft._samples.shift()
    }
  }
}

@run() {
  Ft.init(config)
  init()

  Async:timeout(1, @() {
    loop {
      var t = Date:now()
      loop {
        if ((Date:now() - t) >= Ft.targetFt - Ft.err) {
          break
        }
      }

      update(Ft.dt)
      Ft.update()
    }
  })
}

run()
